import streamlit as st
import json
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# --- T·∫£i d·ªØ li·ªáu t·ª´ file JSON ---
DATA_PATH = "data.json"  # S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi

try:
    with open(DATA_PATH, "r", encoding="utf-8") as f:
        scripts = json.load(f)
except Exception as e:
    st.error(f"‚ùå Kh√¥ng th·ªÉ t·∫£i file JSON: {e}")
    st.stop()

# --- Tr√≠ch xu·∫•t c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi ---
questions = []
answers = []

if isinstance(scripts, list):
    if isinstance(scripts[0], dict) and "question" in scripts[0] and "answer" in scripts[0]:
        questions = [item["question"] for item in scripts]
        answers = [item["answer"] for item in scripts]
    else:
        st.error("‚ö†Ô∏è D·ªØ li·ªáu JSON kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng mong mu·ªën.")
        st.stop()
else:
    st.error("‚ö†Ô∏è File JSON ph·∫£i ch·ª©a danh s√°ch c√°c ƒëo·∫°n h·ªôi tho·∫°i.")
    st.stop()

# Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ t·∫£i
if not questions:
    st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu h·ªôi tho·∫°i ph√π h·ª£p trong file JSON.")
    st.stop()

# --- Vector h√≥a d·ªØ li·ªáu b·∫±ng TF-IDF ---
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(questions)

# --- Giao di·ªán Streamlit ---
st.set_page_config(page_title="üéì Chatbot T∆∞ v·∫•n Tuy·ªÉn sinh", layout="wide")
st.title("üéì Chatbot T∆∞ v·∫•n Tuy·ªÉn sinh")

# Kh·ªüi t·∫°o session state
if "history" not in st.session_state:
    st.session_state.history = []

# Giao di·ªán nh·∫≠p li·ªáu ch√≠nh
col1, col2 = st.columns([3, 1])

with col1:
    # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat trong khung chat ch√≠nh
    chat_container = st.container()
    with chat_container:
        for q, a in st.session_state.history:
            st.markdown(f"""
            <div style='background-color: #f0f2f6; padding: 10px; border-radius: 10px; margin: 5px 0;'>
                <p style='margin: 0; color: #222;'><strong>üßë‚Äçüéì B·∫°n:</strong> {q.replace(chr(10), '<br>')}</p>
            </div>
            <div style='background-color: #e3f2fd; padding: 10px; border-radius: 10px; margin: 5px 0;'>
                <p style='margin: 0; color: #1565c0;'><strong>ü§ñ Chatbot:</strong> {a.replace(chr(10), '<br>')}</p>
            </div>
            """, unsafe_allow_html=True)

    with st.form(key="chat_form", clear_on_submit=True):
        user_input = st.text_input("üí¨ Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n:")
        submit = st.form_submit_button("G·ª≠i")

    if submit and user_input:
        user_vec = vectorizer.transform([user_input])
        sims = cosine_similarity(user_vec, X)
        best_idx = sims.argmax()
        best_score = sims[0, best_idx]

        if best_score > 0.3:
            reply = answers[best_idx]
        else:
            reply = "‚ùóXin l·ªói, m√¨nh ch∆∞a c√≥ th√¥ng tin ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y."

        # L∆∞u l·ªãch s·ª≠ h·ªôi tho·∫°i
        st.session_state.history.append((user_input, reply))
        # Reload trang ƒë·ªÉ hi·ªÉn th·ªã tin nh·∫Øn m·ªõi
        st.rerun()

# Hi·ªÉn th·ªã l·ªãch s·ª≠ ·ªü Sidebar
with st.sidebar:
    st.header("üìú L·ªãch s·ª≠ Chat g·∫ßn ƒë√¢y")
    if st.session_state.history:
        # Ch·ªâ hi·ªÉn th·ªã 5 tin nh·∫Øn g·∫ßn nh·∫•t
        recent_history = st.session_state.history[-5:]
        for q, a in recent_history:
            with st.expander(f"Q: {q[:30]}..." if len(q) > 30 else f"Q: {q}"):
                st.markdown(f"**A:** {a}")
    else:
        st.info("Ch∆∞a c√≥ l·ªãch s·ª≠ chat")
